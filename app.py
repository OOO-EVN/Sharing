# app.py
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from config import BOT_TOKEN, REPORT_CHAT_IDS  # ‚Üê –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º REPORT_CHAT_IDS –∑–¥–µ—Å—å
from database import init_db
from handlers import (
    IsAdminFilter,
    IsAllowedChatFilter,
    command_start_handler,
    today_stats_handler,
    handle_text_messages,
    handle_photo_messages,
    handle_unsupported_content,
    find_scooter_handler,
    delete_scooter_handler,
    export_excel_handler,
    service_report_handler
)
import asyncio
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
@dp.errors_handler()
async def errors_handler(update, exception):
    logging.exception(f"Update {update} –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É: {exception}")
    return True

async def on_startup(dispatcher: Dispatcher):
    await init_db()
    
    from reports import scheduler, send_scheduled_report

    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –±–æ—Ç–∞ –∫ scheduler (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏)
    scheduler.bot = bot

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    scheduler.add_job(
        send_scheduled_report,
        'cron',
        hour=15,
        minute=0,
        args=['morning', bot],
        id='morning_report',
        replace_existing=True
    )
    scheduler.add_job(
        send_scheduled_report,
        'cron',
        hour=23,
        minute=0,
        args=['evening', bot],
        id='evening_report',
        replace_existing=True
    )

    scheduler.start()

    logging.info(f"‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –ó–∞–¥–∞—á–∏: {[job.id for job in scheduler.get_jobs()]}")
    logging.info(f"üì§ REPORT_CHAT_IDS: {REPORT_CHAT_IDS}")

    
    #for chat_id in REPORT_CHAT_IDS:
        #try:
           # await bot.send_message(
            #    chat_id,
           #     "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.\n"
          #      "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ 15:00 –∏ 23:00 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ UTC+5."
         #   )
        #    logging.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
       # except Exception as e:
           # logging.error(f"‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    admin_commands = [
        types.BotCommand(command="start", description="–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"),
        types.BotCommand(command="today_stats", description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É"),
        types.BotCommand(command="export_today_excel", description="–≠–∫—Å–ø–æ—Ä—Ç Excel –∑–∞ —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É"),
        types.BotCommand(command="export_all_excel", description="–≠–∫—Å–ø–æ—Ä—Ç Excel –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è"),
        types.BotCommand(command="service_report", description="–û—Ç—á–µ—Ç –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥"),
        types.BotCommand(command="delete_scooter", description="–£–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä —Å–∞–º–æ–∫–∞—Ç–∞ –ø–æ username"),
        types.BotCommand(command="find_scooter", description="–ù–∞–π—Ç–∏ –∏—Å—Ç–æ—Ä–∏—é –ø–æ –Ω–æ–º–µ—Ä—É —Å–∞–º–æ–∫–∞—Ç–∞"),
    ]
    await dispatcher.bot.set_my_commands(admin_commands)
    logging.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

async def on_shutdown(dispatcher: Dispatcher):
    from reports import scheduler
    try:
        if hasattr(scheduler, 'running') and scheduler.running:
            scheduler.shutdown(wait=False)
            logging.info("‚èπÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

def register_handlers():
    dp.register_message_handler(command_start_handler, IsAllowedChatFilter(), commands="start")
    dp.register_message_handler(today_stats_handler, IsAdminFilter(), commands="today_stats")
    dp.register_message_handler(export_excel_handler, IsAdminFilter(), commands=["export_today_excel", "export_all_excel"])
    dp.register_message_handler(service_report_handler, IsAdminFilter(), commands=["service_report"])
    dp.register_message_handler(find_scooter_handler, IsAdminFilter(), commands=["find_scooter"])
    dp.register_message_handler(delete_scooter_handler, IsAdminFilter(), commands=["delete_scooter"])
    dp.register_message_handler(handle_text_messages, IsAllowedChatFilter(), content_types=types.ContentTypes.TEXT)
    dp.register_message_handler(handle_photo_messages, IsAllowedChatFilter(), content_types=types.ContentTypes.PHOTO)
    dp.register_message_handler(handle_unsupported_content, IsAllowedChatFilter(), content_types=types.ContentTypes.ANY)

if __name__ == "__main__":
    register_handlers()
    executor.start_polling(dp, on_startup=on_startup, on_shutdown=on_shutdown, skip_updates=True)
